
import { useState } from 'react';
import { useParams, useNavigate } from 'react-router-dom';
import { Button } from '@/components/ui/button';
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';
import { Input } from '@/components/ui/input';
import { Textarea } from '@/components/ui/textarea';
import { Dialog, DialogContent, DialogDescription, DialogHeader, DialogTitle, DialogTrigger } from '@/components/ui/dialog';
import { Label } from '@/components/ui/label';
import { ArrowLeft, BookPlus, FlipHorizontal } from 'lucide-react';

interface Flashcard {
  id: number;
  front: string;
  back: string;
  createdAt: string;
}

const FlashcardSet = () => {
  const { setId } = useParams();
  const navigate = useNavigate();
  
  const [flashcards, setFlashcards] = useState<Flashcard[]>([
    {
      id: 1,
      front: 'Budget',
      back: 'A plan for spending money over a specific period',
      createdAt: '2024-01-15'
    },
    {
      id: 2,
      front: 'Revenue',
      back: 'The total amount of income generated by a business',
      createdAt: '2024-01-15'
    }
  ]);

  const [isAddDialogOpen, setIsAddDialogOpen] = useState(false);
  const [isBulkAddDialogOpen, setIsBulkAddDialogOpen] = useState(false);
  const [newCardFront, setNewCardFront] = useState('');
  const [newCardBack, setNewCardBack] = useState('');
  const [bulkCardsText, setBulkCardsText] = useState('');

  const handleAddSingleCard = () => {
    if (newCardFront.trim() && newCardBack.trim()) {
      const newCard: Flashcard = {
        id: Date.now(),
        front: newCardFront.trim(),
        back: newCardBack.trim(),
        createdAt: new Date().toISOString().split('T')[0]
      };
      setFlashcards([...flashcards, newCard]);
      setNewCardFront('');
      setNewCardBack('');
      setIsAddDialogOpen(false);
    }
  };

  const handleBulkAdd = () => {
    if (bulkCardsText.trim()) {
      const lines = bulkCardsText.trim().split('\n');
      const newCards: Flashcard[] = [];
      
      lines.forEach((line, index) => {
        const parts = line.split(' - ');
        if (parts.length >= 2) {
          const front = parts[0].trim();
          const back = parts.slice(1).join(' - ').trim();
          if (front && back) {
            newCards.push({
              id: Date.now() + index,
              front,
              back,
              createdAt: new Date().toISOString().split('T')[0]
            });
          }
        }
      });
      
      if (newCards.length > 0) {
        setFlashcards([...flashcards, ...newCards]);
        setBulkCardsText('');
        setIsBulkAddDialogOpen(false);
      }
    }
  };

  const handleDeleteCard = (id: number) => {
    setFlashcards(flashcards.filter(card => card.id !== id));
  };

  return (
    <div className="min-h-screen bg-gray-50 py-8">
      <div className="container mx-auto px-4 sm:px-6 lg:px-8">
        <div className="mb-6">
          <Button 
            variant="ghost" 
            onClick={() => navigate('/flashcards')}
            className="mb-4"
          >
            <ArrowLeft className="h-4 w-4 mr-2" />
            Back to Flashcards
          </Button>
        </div>

        <div className="flex justify-between items-center mb-8">
          <div>
            <h1 className="text-3xl font-bold text-gray-900 mb-2">
              Manage Flashcard Set
            </h1>
            <p className="text-gray-600">{flashcards.length} cards in this set</p>
          </div>
          <div className="flex space-x-2">
            <Dialog open={isAddDialogOpen} onOpenChange={setIsAddDialogOpen}>
              <DialogTrigger asChild>
                <Button variant="outline">
                  <BookPlus className="h-4 w-4 mr-2" />
                  Add Single Card
                </Button>
              </DialogTrigger>
              <DialogContent>
                <DialogHeader>
                  <DialogTitle>Add New Flashcard</DialogTitle>
                  <DialogDescription>
                    Create a new flashcard by entering the front and back content.
                  </DialogDescription>
                </DialogHeader>
                <div className="space-y-4">
                  <div>
                    <Label htmlFor="front">Front (Question/Word)</Label>
                    <Input
                      id="front"
                      placeholder="Enter front content"
                      value={newCardFront}
                      onChange={(e) => setNewCardFront(e.target.value)}
                    />
                  </div>
                  <div>
                    <Label htmlFor="back">Back (Answer/Definition)</Label>
                    <Textarea
                      id="back"
                      placeholder="Enter back content"
                      value={newCardBack}
                      onChange={(e) => setNewCardBack(e.target.value)}
                      rows={3}
                    />
                  </div>
                  <div className="flex justify-end space-x-2">
                    <Button variant="outline" onClick={() => setIsAddDialogOpen(false)}>
                      Cancel
                    </Button>
                    <Button 
                      onClick={handleAddSingleCard} 
                      disabled={!newCardFront.trim() || !newCardBack.trim()}
                    >
                      Add Card
                    </Button>
                  </div>
                </div>
              </DialogContent>
            </Dialog>

            <Dialog open={isBulkAddDialogOpen} onOpenChange={setIsBulkAddDialogOpen}>
              <DialogTrigger asChild>
                <Button variant="outline">
                  <BookPlus className="h-4 w-4 mr-2" />
                  Bulk Add
                </Button>
              </DialogTrigger>
              <DialogContent className="max-w-2xl">
                <DialogHeader>
                  <DialogTitle>Bulk Add Flashcards</DialogTitle>
                  <DialogDescription>
                    Add multiple flashcards at once. Format: "Front - Back" (one per line)
                  </DialogDescription>
                </DialogHeader>
                <div className="space-y-4">
                  <div>
                    <Label htmlFor="bulk-text">Flashcards</Label>
                    <Textarea
                      id="bulk-text"
                      placeholder={`Example:\nBudget - A plan for spending money\nRevenue - Income generated by business\nProfit - Money earned after expenses`}
                      value={bulkCardsText}
                      onChange={(e) => setBulkCardsText(e.target.value)}
                      rows={8}
                    />
                  </div>
                  <div className="flex justify-end space-x-2">
                    <Button variant="outline" onClick={() => setIsBulkAddDialogOpen(false)}>
                      Cancel
                    </Button>
                    <Button 
                      onClick={handleBulkAdd} 
                      disabled={!bulkCardsText.trim()}
                    >
                      Add Cards
                    </Button>
                  </div>
                </div>
              </DialogContent>
            </Dialog>

            <Button onClick={() => navigate(`/flashcards/${setId}/study`)}>
              <FlipHorizontal className="h-4 w-4 mr-2" />
              Study Cards
            </Button>
          </div>
        </div>

        <div className="grid md:grid-cols-2 lg:grid-cols-3 gap-4">
          {flashcards.map((card) => (
            <Card key={card.id} className="hover:shadow-md transition-shadow duration-200">
              <CardHeader className="pb-3">
                <CardTitle className="text-lg">{card.front}</CardTitle>
              </CardHeader>
              <CardContent>
                <CardDescription className="mb-4">
                  {card.back}
                </CardDescription>
                <div className="flex justify-between items-center">
                  <span className="text-xs text-gray-500">
                    {new Date(card.createdAt).toLocaleDateString()}
                  </span>
                  <Button 
                    variant="destructive" 
                    size="sm"
                    onClick={() => handleDeleteCard(card.id)}
                  >
                    Delete
                  </Button>
                </div>
              </CardContent>
            </Card>
          ))}
        </div>

        {flashcards.length === 0 && (
          <div className="text-center py-12">
            <p className="text-gray-500 text-lg mb-4">No flashcards in this set yet.</p>
            <Dialog open={isAddDialogOpen} onOpenChange={setIsAddDialogOpen}>
              <DialogTrigger asChild>
                <Button>
                  <BookPlus className="h-4 w-4 mr-2" />
                  Add Your First Card
                </Button>
              </DialogTrigger>
            </Dialog>
          </div>
        )}
      </div>
    </div>
  );
};

export default FlashcardSet;
